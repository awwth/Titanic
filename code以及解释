import pandas as pd
import numpy as np 
from pandas import Series,DataFrame
data_train= pd.read_csv("E:/mypy/train.csv")
from sklearn.ensemble import RandomForestRegressor
def set_missing_ages(df):
	age_df=df[['Age','Fare','Parch','SibSp','Pclass']]
	known_age=age_df[age_df.Age.notnull()].as_matrix()#就是把df中的age不为空的age，fare，parch什么的作为一个矩阵 命名为known_age
	unknown_age=age_df[age_df.Age.isnull()].as_matrix()
	y=known_age[:,0]#X[:,0]就是取所有行的第0个数据, X[:,1] 就是取所有行的第1个数据  这里就是取到了所有年龄不为空的人的年龄
	X=known_age[:,1]#这里是取到了所有年龄不为空的Fare 船费
	rfr = RandomForestRegressor(random_state=42, n_estimators=2000, n_jobs=-1)
	#n_jobs：这个参数告诉引擎有多少处理器是它可以使用。 “-1”意味着没有限制，而“1”值意味着它只能使用一个处理器。	#n_estimators=10：决策树的个数，越多越好，但是性能就会越差，至少100左右（具体数字忘记从哪里来的了）可以达到可接受的性能和误差率。
	rfr.fit(X, y)
	predictedAges=rfr.predict(unknown_age[:,1::])
	df.loc[(df.Age.isnull()),'Age']=predictedAges
	return df,rfr
def set_Cabin_type(df):
	df.loc[ (df.Cabin.notnull()), 'Cabin' ] = "Yes" 
	df.loc[ (df.Cabin.isnull()), 'Cabin' ] = "No" 
	return df 
data_train, rfr = set_missing_ages(data_train)
data_train = set_Cabin_type(data_train)
dummies_Cabin = pd.get_dummies(data_train['Cabin'], prefix= 'Cabin')
#就是类别变量向量化
dummies_Embarked = pd.get_dummies(data_train['Embarked'], prefix= 'Embarked')
dummies_Sex = pd.get_dummies(data_train['Sex'], prefix= 'Sex')
dummies_Pclass = pd.get_dummies(data_train['Pclass'], prefix= 'Pclass')
df = pd.concat([data_train, dummies_Cabin, dummies_Embarked, dummies_Sex, dummies_Pclass], axis=1)#将数据根据轴来连接起来  axis： 需要合并链接的轴，0是行，1是列 
df.drop(['Pclass', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], axis=1, inplace=True)
import sklearn.preprocessing as preprocessing 
scaler = preprocessing.StandardScaler()
from sklearn import linear_model 
# 用正则取出我们要的属性值 
train_df = df.filter(regex='Survived|Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass_.*') #正则过滤出以‘xxx’中的开头的列
train_np = train_df.as_matrix()#重新作为一个矩阵
# y即Survival结果 
y = train_np[:, 0]#[:,0]就是取所有行的第0个数据 这里就是取Survived的数据
# X即特征属性值 
X = train_np[:, 1:]#这里就是取所有行第1列以及其往后的数据 及特征属性值
# fit到RandomForestRegressor之中 
clf = linear_model.LogisticRegression(C=1.0, penalty='l1', tol=1e-6)
clf.fit(X, y)
data_test = pd.read_csv("E:/mypy/test.csv")
data_test.loc[ (data_test.Fare.isnull()), 'Fare' ] = 0
# 接着我们对test_data做和train_data中一致的特征变换 
# 首先用同样的RandomForestRegressor模型填上丢失的年龄 
tmp_df = data_test[['Age','Fare', 'Parch', 'SibSp', 'Pclass']]
null_age = tmp_df[data_test.Age.isnull()].as_matrix()
# 根据特征属性X预测年龄并补上 
X = null_age[:, 1:]
predictedAges = rfr.predict(X)
data_test.loc[ (data_test.Age.isnull()), 'Age' ] = predictedAges 
data_test = set_Cabin_type(data_test)
dummies_Cabin = pd.get_dummies(data_test['Cabin'], prefix= 'Cabin')
dummies_Embarked = pd.get_dummies(data_test['Embarked'], prefix= 'Embarked')
dummies_Sex = pd.get_dummies(data_test['Sex'], prefix= 'Sex')
dummies_Pclass = pd.get_dummies(data_test['Pclass'], prefix= 'Pclass')
df_test = pd.concat([data_test, dummies_Cabin, dummies_Embarked, dummies_Sex, dummies_Pclass], axis=1)
df_test.drop(['Pclass', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], axis=1, inplace=True) 
test = df_test.filter(regex='Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass_.*')
predictions = clf.predict(test)
result = pd.DataFrame({'PassengerId':data_test['PassengerId'].as_matrix(), 'Survived':predictions.astype(np.int32)})
result.to_csv("E:/logistic_regression_predictions11.csv", index=False)

	
